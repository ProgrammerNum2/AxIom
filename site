import React, { useState, useEffect } from 'react';
import { MessageCircle, User, Crown, Star, Search, Filter, Menu, X, Lock, Check, Sparkles, Bot, Zap, Brain, Camera, Code, FileText, Music, Video, Calculator, Globe, Shield, ChevronRight, ArrowRight, Send, Plus, Settings, LogOut, CreditCard } from 'lucide-react';

const AIAgentsPlatform = () => {
  const [currentView, setCurrentView] = useState('home');
  const [selectedAgent, setSelectedAgent] = useState(null);
  const [user, setUser] = useState(null);
  const [chatMessages, setChatMessages] = useState([]);
  const [messageInput, setMessageInput] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [showMobileMenu, setShowMobileMenu] = useState(false);
  const [showPricingModal, setShowPricingModal] = useState(false);
  const [isTyping, setIsTyping] = useState(false);

  const aiAgents = [
    {
      id: 1,
      name: "GPT-4 Turbo",
      description: "–ù–∞–π–ø–æ—Ç—É–∂–Ω—ñ—à–∏–π —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å",
      category: "text",
      rating: 4.9,
      avatar: "ü§ñ",
      color: "from-blue-500 to-purple-600",
      premium: true,
      features: ["–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É", "–ü–µ—Ä–µ–∫–ª–∞–¥", "–ê–Ω–∞–ª—ñ–∑", "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è"]
    },
    {
      id: 2,
      name: "DALL-E 3",
      description: "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –æ–ø–∏—Å—ñ–≤",
      category: "image",
      rating: 4.8,
      avatar: "üé®",
      color: "from-pink-500 to-orange-500",
      premium: true,
      features: ["–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å", "–°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è", "–õ–æ–≥–æ—Ç–∏–ø–∏"]
    },
    {
      id: 3,
      name: "Claude Sonnet",
      description: "–†–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ —Ç–≤–æ—Ä—á–æ—Å—Ç—ñ",
      category: "text",
      rating: 4.7,
      avatar: "üß†",
      color: "from-green-500 to-teal-600",
      premium: false,
      features: ["–ê–Ω–∞–ª—ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤", "–¢–≤–æ—Ä—á–µ –ø–∏—Å—å–º–æ", "–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è"]
    },
    {
      id: 4,
      name: "Midjourney",
      description: "–•—É–¥–æ–∂–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏—Å–æ–∫–æ—ó —è–∫–æ—Å—Ç—ñ",
      category: "image",
      rating: 4.9,
      avatar: "üåü",
      color: "from-purple-500 to-pink-600",
      premium: true,
      features: ["–•—É–¥–æ–∂–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", "–ö–æ–Ω—Ü–µ–ø—Ç-–∞—Ä—Ç", "–î–∏–∑–∞–π–Ω"]
    },
    {
      id: 5,
      name: "GitHub Copilot",
      description: "AI –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏ –∫–æ–¥—É",
      category: "code",
      rating: 4.6,
      avatar: "üíª",
      color: "from-gray-600 to-blue-700",
      premium: true,
      features: ["–ê–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–æ–¥—É", "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è"]
    },
    {
      id: 6,
      name: "Whisper AI",
      description: "–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –º–æ–≤–∏",
      category: "audio",
      rating: 4.5,
      avatar: "üéµ",
      color: "from-yellow-500 to-red-500",
      premium: false,
      features: ["–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è", "–ü–µ—Ä–µ–∫–ª–∞–¥ –∞—É–¥—ñ–æ", "–°—É–±—Ç–∏—Ç—Ä–∏"]
    },
    {
      id: 7,
      name: "Runway ML",
      description: "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ",
      category: "video",
      rating: 4.4,
      avatar: "üé¨",
      color: "from-indigo-500 to-purple-600",
      premium: true,
      features: ["–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–µ–æ", "–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –µ—Ñ–µ–∫—Ç–∏", "–ê–Ω—ñ–º–∞—Ü—ñ—è"]
    },
    {
      id: 8,
      name: "Wolfram Alpha",
      description: "–û–±—á–∏—Å–ª—é–≤–∞–ª—å–Ω–∏–π –¥–≤–∏–≥—É–Ω –∑–Ω–∞–Ω—å",
      category: "math",
      rating: 4.7,
      avatar: "üî¢",
      color: "from-orange-500 to-red-600",
      premium: false,
      features: ["–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏", "–ù–∞—É–∫–æ–≤—ñ –¥–∞–Ω—ñ", "–ì—Ä–∞—Ñ—ñ–∫–∏"]
    }
  ];

  const categories = [
    { id: 'all', name: '–í—Å—ñ', icon: Globe },
    { id: 'text', name: '–¢–µ–∫—Å—Ç', icon: FileText },
    { id: 'image', name: '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è', icon: Camera },
    { id: 'code', name: '–ö–æ–¥', icon: Code },
    { id: 'audio', name: '–ê—É–¥—ñ–æ', icon: Music },
    { id: 'video', name: '–í—ñ–¥–µ–æ', icon: Video },
    { id: 'math', name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', icon: Calculator }
  ];

  const filteredAgents = aiAgents.filter(agent => {
    const matchesSearch = agent.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         agent.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || agent.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const handleAgentClick = (agent) => {
    if (!user) {
      setCurrentView('login');
      return;
    }
    if (agent.premium && !user.isPremium) {
      setShowPricingModal(true);
      return;
    }
    setSelectedAgent(agent);
    setCurrentView('chat');
    setChatMessages([
      {
        id: 1,
        text: `–ü—Ä–∏–≤—ñ—Ç! –Ø ${agent.name}. ${agent.description}. –Ø–∫ –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?`,
        sender: 'agent',
        timestamp: new Date()
      }
    ]);
  };

  const sendMessage = async () => {
    if (!messageInput.trim()) return;

    const newMessage = {
      id: chatMessages.length + 1,
      text: messageInput,
      sender: 'user',
      timestamp: new Date()
    };

    setChatMessages([...chatMessages, newMessage]);
    setMessageInput('');
    setIsTyping(true);

    // –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ AI
    setTimeout(() => {
      const responses = [
        "–¶–µ —Ü—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è! –î–∞–π—Ç–µ –º–µ–Ω—ñ –ø–æ–¥—É–º–∞—Ç–∏...",
        "–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ —Ü–∏–º –∑–∞–≤–¥–∞–Ω–Ω—è–º. –û—Å—å –º—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç:",
        "–í—ñ–¥–º—ñ–Ω–Ω–∞ —ñ–¥–µ—è! –î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–±–µ—Ä–µ–º–æ —Ü–µ –¥–µ—Ç–∞–ª—å–Ω–æ:",
        "–¶–µ —Å–ø—Ä–∞–≤–¥—ñ –≤–∞–∂–ª–∏–≤–µ –ø–∏—Ç–∞–Ω–Ω—è. –ú—ñ–π –∞–Ω–∞–ª—ñ–∑:",
        "–Ø —Ä–æ–∑—É–º—ñ—é, —â–æ –≤–∏ –º–∞—î—Ç–µ –Ω–∞ —É–≤–∞–∑—ñ. –ü—Ä–æ–ø–æ–Ω—É—é –Ω–∞—Å—Ç—É–ø–Ω–µ:"
      ];
      
      const agentResponse = {
        id: chatMessages.length + 2,
        text: responses[Math.floor(Math.random() * responses.length)],
        sender: 'agent',
        timestamp: new Date()
      };

      setChatMessages(prev => [...prev, agentResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const handleLogin = (email, password) => {
    // –°–∏–º—É–ª—è—Ü—ñ—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    setUser({
      id: 1,
      email: email,
      name: email.split('@')[0],
      isPremium: false,
      joinDate: new Date()
    });
    setCurrentView('home');
  };

  const handleRegister = (email, password, name) => {
    // –°–∏–º—É–ª—è—Ü—ñ—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    setUser({
      id: 1,
      email: email,
      name: name,
      isPremium: false,
      joinDate: new Date()
    });
    setCurrentView('home');
  };

  const upgradeToPremium = () => {
    setUser({...user, isPremium: true});
    setShowPricingModal(false);
    setCurrentView('home');
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  const AuthForm = ({ isLogin = true }) => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [name, setName] = useState('');

    const handleSubmit = () => {
      if (isLogin) {
        handleLogin(email, password);
      } else {
        handleRegister(email, password, name);
      }
    };

    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-4">
        <div className="bg-white/10 backdrop-blur-md rounded-2xl p-8 w-full max-w-md border border-white/20">
          <div className="text-center mb-8">
            <div className="text-4xl mb-4">ü§ñ</div>
            <h2 className="text-3xl font-bold text-white mb-2">
              {isLogin ? '–í—Ö—ñ–¥' : '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è'}
            </h2>
            <p className="text-white/70">
              {isLogin ? '–£–≤—ñ–π–¥—ñ—Ç—å –¥–æ —Å–≤–æ—î—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ AI –∞–≥–µ–Ω—Ç—ñ–≤' : '–°—Ç–≤–æ—Ä—ñ—Ç—å –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å'}
            </p>
          </div>

} className="space-y-6">
            {!isLogin && (
              <div>
                <label className="block text-white/90 mb-2">–Ü–º'—è</label>
                <input
                  type="text"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  className="w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-purple-500"
                  placeholder="–í–∞—à–µ —ñ–º'—è"
                  required
                />
              </div>
            )}
            
            <div>
              <label className="block text-white/90 mb-2">Email</label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="your@email.com"
                required
              />
            </div>
            
            <div>
              <label className="block text-white/90 mb-2">–ü–∞—Ä–æ–ª—å</label>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å"
                required
              />
            </div>

            <button
              onClick={handleSubmit}
              className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white py-3 rounded-xl font-semibold hover:from-purple-700 hover:to-pink-700 transition-all duration-200 transform hover:scale-105"
            >
              {isLogin ? '–£–≤—ñ–π—Ç–∏' : '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è'}
            </button>
          </div>

          <div className="mt-6 text-center">
            <button
              onClick={() => setCurrentView(isLogin ? 'register' : 'login')}
              className="text-white/70 hover:text-white transition-colors"
            >
              {isLogin ? '–ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å' : '–í–∂–µ —î –∞–∫–∞—É–Ω—Ç? –£–≤—ñ–π–¥—ñ—Ç—å'}
            </button>
          </div>

          <button
            onClick={() => setCurrentView('home')}
            className="mt-4 w-full text-white/50 hover:text-white/70 transition-colors"
          >
            ‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
          </button>
        </div>
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —á–∞—Ç—É
  const ChatInterface = () => {
    return (
      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <div className="bg-white border-b border-gray-200 px-4 py-4">
          <div className="flex items-center justify-between max-w-6xl mx-auto">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setCurrentView('home')}
                className="text-gray-600 hover:text-gray-800 transition-colors"
              >
                ‚Üê –ù–∞–∑–∞–¥
              </button>
              <div className={`w-12 h-12 rounded-2xl bg-gradient-to-br ${selectedAgent.color} flex items-center justify-center text-2xl`}>
                {selectedAgent.avatar}
              </div>
              <div>
                <h1 className="text-xl font-bold text-gray-800">{selectedAgent.name}</h1>
                <p className="text-gray-600">{selectedAgent.description}</p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <div className="flex items-center space-x-1">
                <Star className="w-4 h-4 text-yellow-500 fill-current" />
                <span className="text-sm font-medium">{selectedAgent.rating}</span>
              </div>
              {selectedAgent.premium && (
                <div className="bg-gradient-to-r from-yellow-400 to-orange-500 text-white px-2 py-1 rounded-full text-xs font-medium">
                  Premium
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Chat Messages */}
        <div className="max-w-4xl mx-auto px-4 py-6">
          <div className="space-y-4 mb-6">
            {chatMessages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-xs lg:max-w-md px-4 py-2 rounded-2xl ${
                    message.sender === 'user'
                      ? 'bg-blue-500 text-white'
                      : 'bg-white text-gray-800 border border-gray-200'
                  }`}
                >
                  <p className="text-sm">{message.text}</p>
                  <p className={`text-xs mt-1 ${
                    message.sender === 'user' ? 'text-blue-100' : 'text-gray-500'
                  }`}>
                    {message.timestamp.toLocaleTimeString('uk-UA', {
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </p>
                </div>
              </div>
            ))}
            
            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-white text-gray-800 border border-gray-200 px-4 py-2 rounded-2xl">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Message Input */}
          <div className="bg-white border border-gray-200 rounded-2xl p-4">
            <div className="flex space-x-4">
              <input
                type="text"
                value={messageInput}
                onChange={(e) => setMessageInput(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
                className="flex-1 bg-gray-50 border-0 rounded-xl px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <button
                onClick={sendMessage}
                className="bg-blue-500 text-white px-6 py-3 rounded-xl hover:bg-blue-600 transition-colors flex items-center space-x-2"
              >
                <Send className="w-4 h-4" />
                <span>–ù–∞–¥—ñ—Å–ª–∞—Ç–∏</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏
  const PricingModal = () => {
    return (
      <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl p-8 max-w-md w-full">
          <div className="text-center mb-6">
            <div className="text-4xl mb-4">üíé</div>
            <h3 className="text-2xl font-bold text-gray-800 mb-2">–ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∞</h3>
            <p className="text-gray-600">–û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö AI –∞–≥–µ–Ω—Ç—ñ–≤</p>
          </div>

          <div className="bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl p-6 text-white mb-6">
            <div className="text-center">
              <div className="text-3xl font-bold mb-2">‚Ç¥299</div>
              <div className="text-purple-100">–Ω–∞ –º—ñ—Å—è—Ü—å</div>
            </div>
          </div>

          <div className="space-y-3 mb-6">
            <div className="flex items-center space-x-3">
              <Check className="w-5 h-5 text-green-500" />
              <span className="text-gray-700">–ù–µ–æ–±–º–µ–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö AI –∞–≥–µ–Ω—Ç—ñ–≤</span>
            </div>
            <div className="flex items-center space-x-3">
              <Check className="w-5 h-5 text-green-500" />
              <span className="text-gray-700">–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞</span>
            </div>
            <div className="flex items-center space-x-3">
              <Check className="w-5 h-5 text-green-500" />
              <span className="text-gray-700">–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó</span>
            </div>
            <div className="flex items-center space-x-3">
              <Check className="w-5 h-5 text-green-500" />
              <span className="text-gray-700">–ë–µ–∑ —Ä–µ–∫–ª–∞–º–∏</span>
            </div>
          </div>

          <div className="flex space-x-3">
            <button
              onClick={() => setShowPricingModal(false)}
              className="flex-1 bg-gray-100 text-gray-700 py-3 rounded-xl font-medium hover:bg-gray-200 transition-colors"
            >
              –°–∫–∞—Å—É–≤–∞—Ç–∏
            </button>
            <button
              onClick={upgradeToPremium}
              className="flex-1 bg-gradient-to-r from-purple-500 to-pink-500 text-white py-3 rounded-xl font-medium hover:from-purple-600 hover:to-pink-600 transition-all duration-200 transform hover:scale-105"
            >
              –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è
            </button>
          </div>
        </div>
      </div>
    );
  };

  // –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
  const HomePage = () => {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900">
        {/* Header */}
        <header className="bg-white/10 backdrop-blur-md border-b border-white/20">
          <div className="max-w-6xl mx-auto px-4 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="text-2xl font-bold text-white flex items-center space-x-2">
                  <span className="text-3xl">ü§ñ</span>
                  <span>AI Hub</span>
                </div>
              </div>

              <div className="flex items-center space-x-4">
                {user ? (
                  <div className="flex items-center space-x-4">
                    <div className="flex items-center space-x-2">
                      <div className="w-8 h-8 bg-gradient-to-br from-purple-400 to-pink-400 rounded-full flex items-center justify-center text-white font-medium">
                        {user.name.charAt(0).toUpperCase()}
                      </div>
                      <span className="text-white font-medium">{user.name}</span>
                      {user.isPremium && (
                        <div className="bg-gradient-to-r from-yellow-400 to-orange-500 text-white px-2 py-1 rounded-full text-xs font-medium">
                          Premium
                        </div>
                      )}
                    </div>
                    <button
                      onClick={() => setUser(null)}
                      className="text-white/70 hover:text-white transition-colors"
                    >
                      <LogOut className="w-5 h-5" />
                    </button>
                  </div>
                ) : (
                  <div className="flex items-center space-x-3">
                    <button
                      onClick={() => setCurrentView('login')}
                      className="text-white/90 hover:text-white transition-colors"
                    >
                      –í—Ö—ñ–¥
                    </button>
                    <button
                      onClick={() => setCurrentView('register')}
                      className="bg-white/20 text-white px-4 py-2 rounded-xl hover:bg-white/30 transition-colors"
                    >
                      –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </header>

        {/* Hero Section */}
        <section className="max-w-6xl mx-auto px-4 py-16 text-center">
          <div className="mb-8">
            <h1 className="text-5xl font-bold text-white mb-4">
              –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ <span className="bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">AI –ê–≥–µ–Ω—Ç—ñ–≤</span>
            </h1>
            <p className="text-xl text-white/80 max-w-2xl mx-auto">
              –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Å–≤—ñ—Ç —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É. –ß–∞—Ç—É–π—Ç–µ –∑ –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ AI –∞–≥–µ–Ω—Ç–∞–º–∏ –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –±—É–¥—å-—è–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å.
            </p>
          </div>

          {/* Search Bar */}
          <div className="max-w-2xl mx-auto mb-12">
            <div className="relative">
              <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="–ü–æ—à—É–∫ AI –∞–≥–µ–Ω—Ç—ñ–≤..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full bg-white/10 backdrop-blur-md border border-white/20 rounded-2xl pl-12 pr-4 py-4 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              />
            </div>
          </div>

          {/* Categories */}
          <div className="flex flex-wrap justify-center gap-3 mb-12">
            {categories.map((category) => {
              const Icon = category.icon;
              return (
                <button
                  key={category.id}
                  onClick={() => setSelectedCategory(category.id)}
                  className={`flex items-center space-x-2 px-6 py-3 rounded-xl font-medium transition-all duration-200 ${
                    selectedCategory === category.id
                      ? 'bg-white text-purple-600 shadow-lg transform scale-105'
                      : 'bg-white/10 text-white/80 hover:bg-white/20'
                  }`}
                >
                  <Icon className="w-4 h-4" />
                  <span>{category.name}</span>
                </button>
              );
            })}
          </div>
        </section>

        {/* AI Agents Grid */}
        <section className="max-w-6xl mx-auto px-4 pb-16">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {filteredAgents.map((agent) => (
              <div
                key={agent.id}
                onClick={() => handleAgentClick(agent)}
                className="bg-white/10 backdrop-blur-md border border-white/20 rounded-2xl p-6 cursor-pointer hover:bg-white/20 transition-all duration-300 transform hover:scale-105 hover:shadow-2xl group"
              >
                <div className="text-center">
                  <div className={`w-16 h-16 mx-auto mb-4 rounded-2xl bg-gradient-to-br ${agent.color} flex items-center justify-center text-3xl shadow-lg group-hover:shadow-xl transition-shadow`}>
                    {agent.avatar}
                  </div>
                  
                  <h3 className="text-xl font-bold text-white mb-2">{agent.name}</h3>
                  <p className="text-white/70 text-sm mb-4">{agent.description}</p>
                  
                  <div className="flex items-center justify-center space-x-4 mb-4">
                    <div className="flex items-center space-x-1">
                      <Star className="w-4 h-4 text-yellow-400 fill-current" />
                      <span className="text-white/80 text-sm">{agent.rating}</span>
                    </div>
                    {agent.premium && (
                      <div className="bg-gradient-to-r from-yellow-400 to-orange-500 text-white px-2 py-1 rounded-full text-xs font-medium">
                        Premium
                      </div>
                    )}
                  </div>
                  
                  <div className="space-y-2">
                    {agent.features.slice(0, 3).map((feature, index) => (
                      <div key={index} className="text-white/60 text-xs">
                        ‚Ä¢ {feature}
                      </div>
                    ))}
                  </div>
                  
                  <div className="mt-4 pt-4 border-t border-white/20">
                    <div className="flex items-center justify-center space-x-2 text-white/80 group-hover:text-white transition-colors">
                      <MessageCircle className="w-4 h-4" />
                      <span className="text-sm font-medium">–ü–æ—á–∞—Ç–∏ —á–∞—Ç</span>
                      <ArrowRight className="w-4 h-4 group-hover:translate-x-1 transition-transform" />
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          {filteredAgents.length === 0 && (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">üîç</div>
              <h3 className="text-2xl font-bold text-white mb-2">–ê–≥–µ–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
              <p className="text-white/70">–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –∞–±–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é</p>
            </div>
          )}
        </section>

        {/* Footer */}
        <footer className="bg-black/20 backdrop-blur-md border-t border-white/20 py-8">
          <div className="max-w-6xl mx-auto px-4 text-center">
            <p className="text-white/70">
              ¬© 2025 AI Hub. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ. –°—Ç–≤–æ—Ä–µ–Ω–æ –∑ ‚ù§Ô∏è –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ AI.
            </p>
          </div>
        </footer>
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É
  return (
    <div className="font-sans">
      {currentView === 'home' && <HomePage />}
      {currentView === 'login' && <AuthForm isLogin={true} />}
      {currentView === 'register' && <AuthForm isLogin={false} />}
      {currentView === 'chat' && <ChatInterface />}
      {showPricingModal && <PricingModal />}
    </div>
  );
};

export default AIAgentsPlatform;